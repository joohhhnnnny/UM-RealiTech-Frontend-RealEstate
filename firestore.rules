rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // User Profile collection - AI buyer profiles
    match /userProfiles/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId
        && request.resource.data.userId == request.auth.uid;
    }
    
    // User collections - allow authenticated users to read their own data
    // Agents can also read buyer data for client management
    match /buyers/{userId} {
      allow read: if request.auth != null && 
        (request.auth.uid == userId || 
         exists(/databases/$(database)/documents/agents/$(request.auth.uid)));
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /agents/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    match /developers/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // RealtyConnect collections - Allow all authenticated users for demo purposes
    match /agents/{agentId} {
      allow read, write: if request.auth != null;
    }
    
    match /commissions/{commissionId} {
      allow read, write: if request.auth != null;
    }
    
    match /contracts/{contractId} {
      allow read, write: if request.auth != null;
    }
    
    // Listings collection - Allow public read access for property browsing
    match /listings/{listingId} {
      // Allow public read access (for Homepage property search and browsing)
      allow read: if true;
      
      // Allow create/update/delete only for authenticated users
      allow create, update, delete: if request.auth != null;
    }
    
    // Properties collection - public properties display  
    match /properties/{propertyId} {
      // Allow read access to all users (public property browsing)
      allow read: if true;
      
      // Allow create/update/delete for authenticated users (agents adding properties)
      allow create, update, delete: if request.auth != null;
    }
    
    // Audit logs - remove TTL requirement that was causing issues
    match /audit_logs/{logId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.resource.data.timestamp is timestamp;
      allow update, delete: if false;
    }

    // Buyer Documents collection - Allow users to manage their own documents
    match /buyerDocuments/{documentId} {
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.userType == 'buyer';
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }

    // User Documents collection - Legacy support (if any references remain)
    match /userDocuments/{documentId} {
      allow read: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }

    // Document Submissions collection - Allow users to manage their own document submissions
    // AND allow agents to view submissions (they'll filter client-side for their properties)
    match /documentSubmissions/{documentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }

    // Property Applications collection - Allow users to manage their own property applications  
    // AND allow agents to view applications (they'll filter client-side for their properties)
    match /propertyApplications/{applicationId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null 
        && request.resource.data.userId == request.auth.uid;
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }

    // BuildSafe Collections - TEMPORARY: Allow all access for testing
    // In production, these should have proper authentication rules
    
    // BuildSafe Projects
    match /buildsafe_projects/{projectId} {
      allow read, write: if true; // TEMPORARY: Open access for testing
    }
    
    // BuildSafe Milestones
    match /buildsafe_milestones/{milestoneId} {
      allow read, write: if true; // TEMPORARY: Open access for testing
    }
    
    // BuildSafe Contracts
    match /buildsafe_contracts/{contractId} {
      allow read, write: if true; // TEMPORARY: Open access for testing
    }
    
    // BuildSafe Discrepancies
    match /buildsafe_discrepancies/{discrepancyId} {
      allow read, write: if true; // TEMPORARY: Open access for testing
    }
    
    // BuildSafe Notifications
    match /buildsafe_notifications/{notificationId} {
      allow read, write: if true; // TEMPORARY: Open access for testing
    }
    
    // BuildSafe Subscriptions
    match /buildsafe_subscriptions/{subscriptionId} {
      allow read, write: if true; // TEMPORARY: Open access for testing
    }

    // Activity Logging Collections - Allow authenticated users to create and read their own activity logs
    match /authActivityLogs/{document} {
      // Allow creating auth activity logs for authenticated users
      allow create: if request.auth != null;
      
      // Allow reading own auth activity logs
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         exists(/databases/$(database)/documents/agents/$(request.auth.uid)));
    }
    
    match /user_auth_activities/{document} {
      // Allow creating user auth activities for authenticated users
      allow create: if request.auth != null;
      
      // Allow reading own user auth activities
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         exists(/databases/$(database)/documents/agents/$(request.auth.uid)));
    }
    
    match /business_activities/{document} {
      // Allow creating business activities for authenticated users
      allow create: if request.auth != null;
      
      // Allow reading own business activities
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         exists(/databases/$(database)/documents/agents/$(request.auth.uid)));
    }
    
    match /generalActivityLogs/{document} {
      // Allow creating general activity logs for authenticated users
      allow create: if request.auth != null;
      
      // Allow reading own general activity logs
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         exists(/databases/$(database)/documents/agents/$(request.auth.uid)));
    }
    
    match /userActionLogs/{document} {
      // Allow creating user action logs for authenticated users
      allow create: if request.auth != null;
      
      // Allow reading own user action logs
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         exists(/databases/$(database)/documents/agents/$(request.auth.uid)));
    }
    
    // Verification collections - Allow for demo purposes
    match /verifications/{verificationId} {
      allow read, write: if true; // Open for demo
    }
    
    match /verification_status/{statusId} {
      allow read, write: if true; // Open for demo
    }
    
    // Buyer-Developer connections
    match /buyer_developer_connections/{connectionId} {
      allow read, write: if true; // Open for demo  
    }
    
    // Buyer-Agent connections
    match /buyer_agent_connections/{connectionId} {
      allow read, write: if true; // Open for demo
    }
    
    // Developer and Agent collections - Allow for demo purposes  
    match /developers/{userId} {
      allow read, write: if true; // Open for demo
    }
    
    match /agents/{userId} {
      allow read, write: if true; // Open for demo
    }
    
    // Allow all users access for demo - this will override more restrictive rules above
    match /{document=**} {
      allow read, write: if true; // Completely open for demo purposes
    }
  }
}